# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# [START drive_quickstart]
from __future__ import print_function

import io
import logging
import os
import os.path
import shutil
import sys

import boto3
from botocore.exceptions import ClientError
from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
from googleapiclient.http import MediaIoBaseDownload

# ACCESS_KEY = os.environ["ACCESS_KEY"]
# SECRET_KEY = os.environ["SECRET_KEY"]


# If modifying these scopes, delete the file token.json.
SCOPES = ["https://www.googleapis.com/auth/drive"]


def main():
    """Shows basic usage of the Drive v3 API.
    Prints the names and ids of the first 10 files the user has access to.
    """
    creds = None
    # The file token.json stores the user's access and refresh tokens, and is
    # created automatically when the authorization flow completes for the first
    # time.
    if os.path.exists("token.json"):
        creds = Credentials.from_authorized_user_file("token.json", SCOPES)
    # If there are no (valid) credentials available, let the user log in.
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file("credentials.json", SCOPES)
            creds = flow.run_local_server(port=0)
        # Save the credentials for the next run
        with open("token.json", "w") as token:
            token.write(creds.to_json())
    service = build("drive", "v3", credentials=creds)

    def fetch_files_by_type(mimeType: str):

        # Call the Drive v3 API
        results = (
            service.files()
            .list(
                pageSize=10,
                driveId="0AFb8dUOaLpgMUk9PVA",
                supportsAllDrives=True,
                includeItemsFromAllDrives=True,
                corpora="drive",
                fields="*"
                # fields="nextPageToken, files(id, name)",
            )
            .execute()
        )
        items = results.get("files", [])
        results = {}
        if not items:
            print("No files found.")
        else:
            for item in items:
                print(item["mimeType"], item["name"])
                #print(item)
                print("---------------")
                if item["mimeType"] == mimeType:
                    results[item["id"]] = item
        return results

    def download_file(id_dict: dict):

        gdocs_mime_list = [
            "application/vnd.google-apps.presentation",
            "application/vnd.google-apps.spreadsheet",
            "application/vnd.google-apps.document",
        ]



            for key in id_dict:
                
                if mimeType not in gdocs_mime_list:

                    request = service.files().get_media(fileId=key)

                    fh = io.BytesIO()
                    downloader = MediaIoBaseDownload(fh, request)
                    done = False
                    while done is False:
                        status, done = downloader.next_chunk()
                        print("Download %d%%" % int(status.progress() * 100))
                    # The file has been downloaded into RAM, now save it in a file
                    fh.seek(0)
                    with open(f"{id_dict[key]['name']}", "wb") as f:
                        shutil.copyfileobj(fh, f)
                elif mimeType == "application/vnd.google-apps.presentation":

                    request = service.files().export_media(
                        fileId=key, mimeType="application/pdf"
                    )

                    fh = io.BytesIO()
                    downloader = MediaIoBaseDownload(fh, request)
                    done = False
                    while done is False:
                        status, done = downloader.next_chunk()
                        print("Download %d%%" % int(status.progress() * 100))
                    # The file has been downloaded into RAM, now save it in a file
                    fh.seek(0)
                    with open(f"{id_dict[key]['name']}.pdf", "wb") as f:
                        shutil.copyfileobj(fh, f)

    def upload_file(
        file_name,
        bucket,
        object_name=None,
    ):
        """Upload a file to an S3 bucket

        :param file_name: File to upload
        :param bucket: Bucket to upload to
        :param object_name: S3 object name. If not specified then file_name is used
        :return: True if file was uploaded, else False
        """

        # If S3 object_name was not specified, use file_name
        if object_name is None:
            object_name = file_name
        # Upload the file
        s3_client = boto3.client("s3")
        try:
            response = s3_client.upload_file(file_name, bucket, object_name)
        except ClientError as e:
            logging.error(e)
            return False
        return True

    id_dict = fetch_files_by_type(mimeType="application/vnd.google-apps.presentation")
    download_file(id_dict=id_dict)
    for item in id_dict:
        upload_file(
            file_name=f"{item}.pdf",
            bucket="autobackup-testing",
            object_name=f"{item}.pdf",
        )


if __name__ == "__main__":
    main()
# [END drive_quickstart]
